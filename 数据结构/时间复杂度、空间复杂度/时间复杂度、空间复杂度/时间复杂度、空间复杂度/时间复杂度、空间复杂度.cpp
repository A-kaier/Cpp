/*
	时间复杂度用大O标记法表示，空间复杂度用大O标记法表示。
	时间复杂度：
		O(1)：常数时间，如赋值、比较、位运算等操作。
		O(logn)：对数时间，如二分查找、二叉树查找等。
		O(n)：线性时间，如顺序查找、简单循环等。
		O(nlogn)：对数线性时间，如快速排序、归并排序等。
		O(n^2)：平方时间，如简单排序、冒泡排序等。
		O(n^3)：立方时间，如三重循环。
		O(2^n)：指数时间，如全排列。
		O(n!)：阶乘时间，如全排列。

	空间复杂度：
		O(1)：常数空间，如变量、指针等。
		O(n)：线性空间，如数组、链表等。
		O(n^2)：平方空间，如二维数组。
		O(n^3)：立方空间，如三维数组。
		O(2^n)：指数空间，如满二叉树。
		O(n!)：阶乘空间，如全排列。

	常见的时间复杂度：
		O(1)：常数时间，如赋值、比较、位运算等操作。
		O(logn)：对数时间，如二分查找、二叉树查找等。
		O(n)：线性时间，如顺序查找、简单循环等。
		O(nlogn)：对数线性时间，如快速排序、归并排序等。
		O(n^2)：平方时间，如简单排序、冒泡排序等。
		O(n^3)：立方时间，如三重循环。
		O(2^n)：指数时间，如全排列。
		O(n!)：阶乘时间，如全排列。

	常见的空间复杂度：
		O(1)：常数空间，如变量、指针等。
		O(n)：线性空间，如数组、链表等。
		O(n^2)：平方空间，如二维数组。
		O(n^3)：立方空间，如三维数组。
		O(2^n)：指数空间，如满二叉树。
		O(n!)：阶乘空间，如全排列

	时间复杂度和空间复杂度的区别：
		时间复杂度：指算法运行的时间开销，是一种渐进的概念。
		空间复杂度：指算法运行所需的内存空间，是一种确定的概念。

	时间复杂度和空间复杂度的区别：
		时间复杂度：算法运行的时间开销随数据规模的增大而增大，算法的运行时间与数据规模的增长呈正比关系。
		空间复杂度：算法运行所需的内存空间随数据规模的增大而增大，算法的运行空间与数据规模的增长呈正比关系。

时间复杂度和空间复杂度的应用：

	时间复杂度：
		时间复杂度分析是对算法运行时间的度量，用来评估算法的效率。
		时间复杂度分析可以帮助我们分析算法的效率，从而更好地选择算法、优化算法。
		时间复杂度分析可以帮助我们分析算法的最坏情况、平均情况、最佳情况。
		时间复杂度分析可以帮助我们分析算法的输入规模、输出规模、数据规模。
		时间复杂度分析可以帮助我们分析算法的实现难度。

	空间复杂度：
		空间复杂度分析是对算法运行所需的内存空间的度量，用来评估算法的效率。
		空间复杂度分析可以帮助我们分析算法的内存消耗，从而更好地选择算法、优化算法。
		空间复杂度分析可以帮助我们分析算法的空间复杂度。
		空间复杂度分析可以帮助我们分析算法的输入规模、输出规模、数据规模。
		空间复杂度分析可以帮助我们分析算法的实现难度。


		低精度：
		int范围：[−2^31, 2^31 − 1]，左区间没有-1是因为补码
		float范围：[1.175494351e-38, 3.402823466e+38]
		double范围：[2.2250738585072014e-308, 1.7976931348623157e+308]

		高精度：
		long long范围：[−2^63, 2^63 − 1]
		long double范围：[3.3621031431120935e-4932, 1.18973149535723176508575932662800702e+4932]

*/